name: Production Build

on:
  pull_request_target:
    branches:
      - main
permissions:
  pull-requests: write
  contents: write
  statuses: write
  actions: write
  checks: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest -q
      - name: Run smoke checks
        run: python app.py --run-checks

  merge:
    needs: test
    if: ${{ !github.event.pull_request.draft && github.event.pull_request.head.repo.fork == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Merge the PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            if (!pr) {
              core.setFailed('No pull_request in payload');
              return;
            }

            // Ensure checks on the PR head SHA are successful (optional if branch protection already enforces)
            const ref = pr.head.sha;
            const checks = await github.rest.checks.listForRef({ owner, repo, ref });
            const failing = checks.data.check_runs.filter(r => !['success','skipped','neutral'].includes(r.conclusion));
            if (failing.length) {
              core.setFailed(`Checks not successful yet: ${failing.map(r=>r.name).join(', ')}`);
              return;
            }

            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number: pr.number,
              merge_method: "squash"
            });
